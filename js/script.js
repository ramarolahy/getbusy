/**
 * Intro to Javascript
 * CSCI E3 Final Project
 * App name: My To Do List
 * Author: Mbinintsoa Ramarolahy
 * Features: - Add To Do item list
 *           - Delete To Do item List
 * 
 * The app has three modules:
 *  entryController: Handles app data and object constructors
 *  DOMController: Handles the UI and User inputs
 *  appController: Handles interaction between DOM and entryController
 * 
 *  Each module is an IIFE which contains private variables, methods, and public methods (Thank you closures!)
 *  ES6 has been incorporated to facilitate some syntaxes and templates
 *  The app uses local storage for data persistence (at least within the same browser)
 *  
 */


/* === Item List Controller Module ===
    This module will handle 
        Creating Item List objects
        Deleting Item List objects
*/
//I will use IIFEs for each module to help control scoping issues
"use strict";

var entryController = (function () {
    // This will be the private constructor for new entries
    var itemList = function (id, des) {
        // this is generated by addNewItemList()
        this.id = id;
        // this is entered by user and retrieved by DOMController.getUserInput()
        this.description = des;
        // to test if the stored lists are itemList @ init
        // this.reconTest = function () {
        //     console.log("Reconstructed!")
        // }
    };
    // This will the Data Structure that will store all item list entries
    // Using an object will allow me to add additional properties for future app improvements.
    var todoList = {
        entries: []
    }

    // Private method to update local storage with new entry
    var updateLocalStorage = function () {
        //Initialize JSON object to store locally
        var jsonFile = {
            myTodoList: todoList.entries
        }
        // Update file in local storage
        var myLocalFile = JSON.stringify(jsonFile);
        window.localStorage.setItem('todoList', myLocalFile);
    }

    // With the IIFEs, I will need to create privileged methods that other
    // modules will be able to access. The expression returns an object with
    // name: value pairs that serves as  public properties (methods) to the module.
    return {
        // public method to add new item list
        addNewItemList: function (des) {
            var newItemList, todoId;

            // Generate unique ID for each todo entry.
            // If the the list is empty, first id = 0
            if (todoList.entries.length <= 0) {
                todoId = 0;
            } else {
                // Calculate IDs based on the last existing ID, not the number of ID 
                // Existing Ids won't necessarily be in incremental order at all times. 
                todoId = todoList.entries[todoList.entries.length - 1].id + 1;
            }
            // This creates a new instance of the object ItemList
            // des will be determined from the user input
            newItemList = new itemList(todoId, des);

            // Once the instance is created, add it to todoList object
            todoList.entries.push(newItemList);

            // Update JSON object in local storage
            updateLocalStorage();

            return newItemList;
        },

        // Public method to delete item from list
        // Delete the corresponding item list/index
        deleteItem: function (entryId) {
            /* Since the user can delete any entry (any id) the method deleteItem will need to 
            re-create an array of all existing ids (whatever is currently stored in todoList) each time,
            and then delete the selected id.
             */
            var idsArr, index;

            // create an array of all existing ids
            // map() returns a new array by using callback function on each entry
            idsArr = todoList.entries.map(function (entry) {
                return entry.id;
            });

            //console.log(ids);
            // Next, get the id passed from the UI and locate in the ids array
            index = idsArr.indexOf(entryId);
            //console.log(index);
            // Next, splice() the (1) entry from todoList
            if (index !== -1) {
                todoList.entries.splice(index, 1);
            } else {
                console.log('entry ID does not exist!');
            }

            // Update locale storage
            updateLocalStorage();
        },
        // Public method to check local storage of ny previous to do list
        getLocalStorage: function () {
            // Assign to variable
            var storedList = window.localStorage.getItem('todoList');

            // if not Null then parse it
            if (storedList) {
                var parsedList = JSON.parse(storedList);
            }

            return parsedList;
        },

        // Public method to initialize the Data Structure todoList.entries
        // that stores todo list entries
        initListEntries: function (obj) {
            var re_init_entry = new itemList(obj.id, obj.description);
            //To test if the stored lists got reconstructed
            //console.log(re_init_entry.reconTest());
            todoList.entries.push(re_init_entry)

            // console.log(obj.reconTest());
            // todoList.entries.push(obj)
        }
    }
})();
//========================================



/* === DOM Controller ===
    This module will handle 
        Getting the User Input
        Adding Item List to the UI
        Deleting Item List from the UI
*/
var DOMController = (function ($) {
    // I will create an object to have a centralized control of all DOM elements
    var DOMStrings = {
        newItemInput: '.new_entry_input',
        newItemBtn: '.new_entry_btn',
        itemLabel: '.entry_label',
        delItemBtn: '.del_entry_btn',
        parentNd: '.list_wrap'
    };

    // With the IIFEs, I will need to create privileged methods that other
    // modules will be able to access. The expression returns an object with
    // name: value pairs that serves as  public properties (methods) to the module.
    return {
        // Public/Privileged method to get the user input
        getUserInput: function () {
            return {
                des: $(DOMStrings.newItemInput).val()
            };
        },
        // Public method to clear the field
        clearInputField: function () {
            $(DOMStrings.newItemInput).val('')
        },
        // Public method to focus on the field if the user submits it blank
        isEmpty: function () {
            $(DOMStrings.newItemInput).addClass('empty');
            $(DOMStrings.newItemInput).focus();

        },
        notEmpty: function () {
            $(DOMStrings.newItemInput).removeClass('empty');
            $(DOMStrings.newItemInput).focus();
        },
        // privileged method to append new to do item
        // obj is the new ItemList object
        addTodoItem: function (obj) {
            var parentNd = DOMStrings.parentNd;
            // I am using ES6 String Literals for the child node that needs to be inserted.
            // ${obj.id} is generated by entryController.addNewItemList()
            // ${obj.description} by 
            var childNd =
                `
            <div id="entry_${obj.id}" class="entry_item_wrap" style="display:none;" required>
                <label class="entry_label">${obj.description}</label>
                <button class="all_btn" >
                    <i class="del_entry_btn far fa-times-circle"></i>
                </button >
            </div>
                `;
            // parentNd.appendChild(childNd);
            //document.querySelector(parentNd).insertAdjacentHTML('beforeend', childNd);
            $(childNd).appendTo(parentNd).fadeIn(500);
        },

        // public method to get the id and index of selected entry (to delete)
        getEntryId: function (e) {
            var domId, arrEl, splitDomId;
            // Walk the DOM to get the unique id of the selected entry. Id is at 2 parentNodes up.
            // domId will return a string 'entry_i' (i is unique for each entry)
            //domId = event.target.parentNode.parentNode.id;
            domId = e.target.closest(".entry_item_wrap").id;

            // Next, using split() on domId will allow us to access the entryId (idsArr index in entryController.deleteItem())
            splitDomId = domId.split('_'); // returns ['entry', 'i']
            // parseInt() to get an Int version of the selected index
            arrEl = parseInt(splitDomId[1]);

            return {
                // Needed by deleteTodoItem()
                selectorId: domId,
                // Needed by entryController.deleteItem()
                entryId: arrEl
            };
        },

        // priviledge
        deleteTodoItem: function (selectorId) {

            // Select the element to be deleted
            var el = $(`#${selectorId}`);
            // Remove element
            el.remove();            
        },

        getDOMStrings: function () {
            return DOMStrings;
        }
    }


})(jQuery);
// =======================================

/* === App Controller ===
    This module will handle 
        User actions
*/
var appController = (function (entryCtrl, DOMCtrl, $) {
    // This will grab the DOMStrings from the UI Controller
    var setUpEventListeners = function () {
        var DOMStrings = DOMCtrl.getDOMStrings();

        // add new list item when user presses Enter Key or clicks add icon
        $(DOMStrings.newItemBtn).click(ctrlAddItem);
        $(document).keypress(function(e) {
            if (e.key == 13 || e.which == 13) {
                ctrlAddItem();
            }
        });
        // listen to clicks coming from the button/icon only
        $(DOMStrings.parentNd).click(function (e) {
            if (e.target.tagName === "BUTTON" || e.target.tagName === "I") {
                ctrlDeleteItem(e);
            }
        });
    };
    // Private method to add new Item
    var ctrlAddItem = function () {
        var userInput, newTodoItem;
        // 1. get the user input (returns the item des)
        userInput = DOMCtrl.getUserInput();

        // 2. Create new item entry object
        if (userInput.des !== '') {
            newTodoItem = entryCtrl.addNewItemList(userInput.des);
            DOMCtrl.notEmpty();
        } else {
            // add method that focus on input here
            DOMCtrl.isEmpty();
            return false;
        }
        // 3. Display new item entry on UI
        DOMCtrl.addTodoItem(newTodoItem);

        // 4. Clear input field
        DOMCtrl.clearInputField();

    };

    var ctrlDeleteItem = function (e) {
        // 1. Capture and split the DOM id to locate the entry in the ids array
        var elToDel = DOMCtrl.getEntryId(e);

        // 2. Delete item from Data Structure.
        entryCtrl.deleteItem(elToDel.entryId);

        // 3. Delete item from UI.
        $(`#${elToDel.selectorId}`).fadeOut(200);
        setTimeout(() => {
            DOMCtrl.deleteTodoItem(elToDel.selectorId);
        }, 300);
        

    };

    return {
        /**
         * The init method
         */
        init: function () {
            console.log('App started!');
            // Set up all event listeners;
            setUpEventListeners();
            // Check local storage for any stored list
            var initList = entryCtrl.getLocalStorage();
            // if ANY, print list AND repopulate todoList.entries
            if (initList) {
                initList.myTodoList.forEach(function (item) {
                    entryCtrl.initListEntries(item);
                    DOMCtrl.addTodoItem(item);
                })
            }
        }
    };


})(entryController, DOMController, jQuery);
// =======================================
appController.init();